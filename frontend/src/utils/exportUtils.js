import html2canvas from 'html2canvas';

export const generateVibeCard = async (userData, moodProfile, personality) => {
  try {
    // Create a temporary div for the vibe card
    const cardElement = document.createElement('div');
    cardElement.style.cssText = `
      width: 400px;
      height: 600px;
      background: linear-gradient(135deg, #1DB954, #191414);
      color: white;
      padding: 30px;
      font-family: 'Inter', sans-serif;
      position: absolute;
      top: -9999px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
    `;

    cardElement.innerHTML = `
      <div>
        <h1 style="font-size: 24px; font-weight: bold; margin-bottom: 10px;">
          ${userData.user.display_name}'s VibeMatch
        </h1>
        <div style="font-size: 18px; color: #1ED760; margin-bottom: 20px;">
          ${personality.name}
        </div>
        <div style="margin-bottom: 20px;">
          <div style="margin-bottom: 10px;">
            <strong>Happiness:</strong> ${moodProfile.happiness}%
          </div>
          <div style="margin-bottom: 10px;">
            <strong>Energy:</strong> ${moodProfile.energy}%
          </div>
          <div style="margin-bottom: 10px;">
            <strong>Danceability:</strong> ${moodProfile.danceability}%
          </div>
        </div>
        <div style="font-size: 12px; opacity: 0.8;">
          Top Track: ${userData.topTracks.items[0]?.name || 'N/A'}
        </div>
      </div>
      <div style="text-align: center; font-size: 14px; opacity: 0.7;">
        Generated by VibeMatch ðŸŽµ
      </div>
    `;

    document.body.appendChild(cardElement);

    // Generate canvas
    const canvas = await html2canvas(cardElement, {
      backgroundColor: null,
      scale: 2,
      logging: false
    });

    // Clean up
    document.body.removeChild(cardElement);

    return canvas;
  } catch (error) {
    console.error('Error generating vibe card:', error);
    throw new Error('Failed to generate vibe card');
  }
};

export const downloadVibeCard = async (userData, moodProfile, personality) => {
  try {
    const canvas = await generateVibeCard(userData, moodProfile, personality);
    
    // Create download link
    const link = document.createElement('a');
    link.download = `${userData.user.display_name}_VibeMatch.png`;
    link.href = canvas.toDataURL();
    
    // Trigger download
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  } catch (error) {
    console.error('Error downloading vibe card:', error);
    throw error;
  }
};

export const shareToSocial = async (userData, moodProfile, personality, platform) => {
  const text = `Check out my music personality: ${personality.name}! ðŸŽµ My happiness level is ${moodProfile.happiness}% according to VibeMatch. What's yours?`;
  const url = window.location.origin;

  const shareUrls = {
    twitter: `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(url)}`,
    facebook: `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}&quote=${encodeURIComponent(text)}`,
    linkedin: `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(url)}`,
    discord: `https://discord.com/channels/@me`
  };

  if (shareUrls[platform]) {
    window.open(shareUrls[platform], '_blank', 'width=600,height=400');
    return true;
  }

  // Fallback to Web Share API
  if (navigator.share) {
    try {
      await navigator.share({
        title: 'My VibeMatch Results',
        text: text,
        url: url
      });
      return true;
    } catch (error) {
      console.log('Sharing cancelled or failed:', error);
    }
  }

  // Fallback to clipboard
  try {
    await navigator.clipboard.writeText(`${text} ${url}`);
    return 'copied';
  } catch (error) {
    console.error('Failed to copy to clipboard:', error);
    return false;
  }
};
